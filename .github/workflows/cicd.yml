name: CI

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  dependency-review:
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: read
    runs-on: ubuntu-latest
    steps:
      - name: Dependency Review
        uses: actions/dependency-review-action@v4

  security-scans:
    permissions:
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Trivy filesystem scan
        id: trivy
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: fs
          scan-ref: .
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          exit-code: 1
          format: sarif
          output: trivy-results.sarif
        continue-on-error: true

      - name: Upload Trivy SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
          category: trivy

      - name: Fail on Trivy findings
        if: steps.trivy.outcome == 'failure'
        run: |
          echo "Trivy found CRITICAL/HIGH vulnerabilities"
          exit 1

      - name: Semgrep SAST scan
        id: semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: p/ci
          format: sarif
          output: semgrep-results.sarif
        continue-on-error: true

      - name: Check Semgrep SARIF
        id: semgrep_sarif
        if: always()
        run: |
          if [ -s semgrep-results.sarif ]; then
            echo "has_sarif=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_sarif=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload Semgrep SARIF
        if: steps.semgrep_sarif.outputs.has_sarif == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
          category: semgrep

      - name: Semgrep SARIF missing notice
        if: steps.semgrep_sarif.outputs.has_sarif != 'true'
        run: echo "Semgrep did not generate a SARIF file; skipping upload."

      - name: Fail on Semgrep findings
        if: steps.semgrep.outcome == 'failure'
        run: |
          echo "Semgrep reported findings"
          exit 1

  codeql:
    needs: security-scans
    runs-on: windows-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Install required workloads
        run: dotnet workload restore QRTracker.sln

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp

      - name: Restore solution
        run: dotnet restore QRTracker.sln

      - name: Build for CodeQL
        run: dotnet build src/QRTracker/QRTracker.csproj -c Debug

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  build:
    needs: security-scans
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Install required workloads
        run: dotnet workload restore QRTracker.sln

      - name: Restore
        run: dotnet restore QRTracker.sln

      - name: Vulnerability scan (dotnet list package)
        run: dotnet list src/QRTracker/QRTracker.csproj package --vulnerable --include-transitive

      - name: Vulnerability report (JSON)
        shell: pwsh
        run: |
          dotnet list src/QRTracker/QRTracker.csproj package --vulnerable --include-transitive --format json > vulnerability-report.json
          Get-Content vulnerability-report.json

      - name: Upload vulnerability report
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-report
          path: vulnerability-report.json


      - name: Deprecated package scan
        run: dotnet list src/QRTracker/QRTracker.csproj package --deprecated

      - name: License compliance check
        shell: pwsh
        run: |
          $projectPath = 'src/QRTracker/QRTracker.csproj'
          $licenseJsonPath = Join-Path $PWD 'license-inventory.json'
          dotnet list $projectPath package --include-transitive --format json |
            Tee-Object -FilePath $licenseJsonPath | Out-Null

          $inventory = Get-Content $licenseJsonPath -Raw | ConvertFrom-Json
          if (-not $inventory.projects) {
            throw 'Unable to parse project dependency inventory from dotnet list output.'
          }
          $globalPackages = dotnet nuget locals global-packages --list |
            Select-String 'global-packages' | ForEach-Object {
              ($_ -split ':', 2)[1].Trim()
            } | Select-Object -First 1

          if (-not $globalPackages) {
            throw 'Unable to determine the global packages folder from dotnet nuget locals.'
          }

          $packages = @()
          foreach ($project in $inventory.projects) {
            foreach ($framework in $project.frameworks) {
              if ($framework.topLevelPackages) {
                $packages += $framework.topLevelPackages
              }
              if ($framework.transitivePackages) {
                $packages += $framework.transitivePackages
              }
            }
          }

          $packages = $packages | Where-Object { $_ } | ForEach-Object {
              [PSCustomObject]@{
                Id = $_.id
                Version = $_.resolvedVersion
              }
            } | Sort-Object Id, Version -Unique

          $reportLines = @()
          $violations = @()
          foreach ($pkg in $packages) {
            $id = $pkg.Id
            $version = $pkg.Version
            $packageFolder = Join-Path $globalPackages ($id.ToLower())
            $nuspecPath = Join-Path (Join-Path $packageFolder $version) "${($id.ToLower())}.nuspec"

            if (-not (Test-Path $nuspecPath)) {
              $line = "$id@$version - license metadata unavailable"
              $reportLines += $line
              $violations += $line
              continue
            }

            [xml]$nuspec = Get-Content $nuspecPath
            $licenseNode = $nuspec.package.metadata.license
            $licenseValue = $null
            if ($licenseNode) {
              $licenseValue = $licenseNode.InnerText
            }

            if (-not $licenseValue) {
              $licenseUrlNode = $nuspec.package.metadata.licenseUrl
              if ($licenseUrlNode -and $licenseUrlNode.InnerText) {
                $licenseValue = $licenseUrlNode.InnerText
              } elseif ($licenseUrlNode) {
                $licenseValue = $licenseUrlNode
              }
            }

            if (-not $licenseValue) {
              $licenseValue = 'UNKNOWN'
            }

            $line = "$id@$version - $licenseValue"
            $reportLines += $line

            if ($licenseValue -match '(AGPL|GPL|LGPL|UNKNOWN|UNLICENSED)') {
              $violations += $line
            }
          }

          $reportPath = Join-Path $PWD 'licenses.txt'
          $reportLines | Set-Content -Path $reportPath -Encoding UTF8
          Get-Content $reportPath
          Remove-Item $licenseJsonPath -ErrorAction SilentlyContinue

          if ($violations.Count -gt 0) {
            Write-Error "Disallowed or unknown licenses detected.`n$($violations -join [Environment]::NewLine)"
            exit 1
          }
        working-directory: ${{ github.workspace }}

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.txt

      - name: Install Gitleaks
        shell: pwsh
        run: choco install gitleaks --no-progress -y

      - name: Credential leak scan (gitleaks)
        shell: pwsh
        run: |
          $env:PATH += ';C:\ProgramData\chocolatey\bin'
          gitleaks detect --source "${{ github.workspace }}" --no-banner --redact

      - name: Build (Release)
        run: dotnet build src/QRTracker/QRTracker.csproj -c Release

      - name: Publish self-contained executable
        shell: pwsh
        run: |
          $publishDir = Join-Path $env:GITHUB_WORKSPACE 'artifacts/win-x64'
          New-Item -ItemType Directory -Force -Path $publishDir | Out-Null
          dotnet publish src/QRTracker/QRTracker.csproj -c Release -f net9.0-windows10.0.19041.0 -r win10-x64 --self-contained true /p:PublishSingleFile=true /p:IncludeNativeLibrariesForSelfExtract=true /p:EnableCompressionInSingleFile=true -o $publishDir
          Get-ChildItem $publishDir

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: QRTracker-win-x64
          path: artifacts/win-x64/*.exe

  release:
    needs:
      - build
      - codeql
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: QRTracker-win-x64
          path: dist

      - name: Rename binary with tag
        shell: bash
        run: |
          set -euo pipefail
          binary_path="dist/artifacts/win-x64/QRTracker.exe"
          if [ ! -f "$binary_path" ]; then
            echo "Expected binary not found at $binary_path after downloading artifacts" >&2
            find dist -maxdepth 3 -type f >&2 || true
            exit 1
          fi
          mv "$binary_path" "dist/QRTracker-${{ github.ref_name }}.exe"

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/QRTracker-${{ github.ref_name }}.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
